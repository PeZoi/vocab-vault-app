name: Vocab Vault CI/CD

on:
   push:
      branches: [production]
   pull_request:
      branches: [production]

env:
   DOCKER_USERNAME: pezoi
   BACKEND_IMAGE: pezoi/vocab-vault-backend
   FRONTEND_IMAGE: pezoi/vocab-vault-frontend

jobs:
   test:
      runs-on: ubuntu-latest

      steps:
         - name: Checkout code
           uses: actions/checkout@v4

         - name: Set up JDK 17
           uses: actions/setup-java@v4
           with:
              java-version: "17"
              distribution: "temurin"

         - name: Cache Maven dependencies
           uses: actions/cache@v3
           with:
              path: ~/.m2
              key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
              restore-keys: ${{ runner.os }}-m2

         - name: Set up Node.js
           uses: actions/setup-node@v4
           with:
              node-version: "18"
              cache: "npm"
              cache-dependency-path: vocab_vault_fe/package-lock.json

         - name: Install frontend dependencies
           run: |
              cd vocab_vault_fe
              npm ci

         - name: Test Backend
           run: |
              cd vocab_vault_be
              ./mvnw test

         - name: Test Frontend
           run: |
              cd vocab_vault_fe
              npm run test:ci
           continue-on-error: true # Continue if no tests are configured

         - name: Build Backend
           run: |
              cd vocab_vault_be
              ./mvnw clean package -DskipTests

         - name: Build Frontend
           run: |
              cd vocab_vault_fe
              npm run build

   build-and-push:
      needs: test
      runs-on: ubuntu-latest
      if: github.ref == 'refs/heads/production'

      steps:
         - name: Checkout code
           uses: actions/checkout@v4

         - name: Set up Node.js for sitemap generation
           uses: actions/setup-node@v4
           with:
              node-version: "18"
              cache: "npm"
              cache-dependency-path: vocab_vault_fe/package-lock.json

         - name: Install frontend dependencies
           run: |
              cd vocab_vault_fe
              npm ci

         - name: Generate sitemap
           run: |
              cd vocab_vault_fe
              npm run generate-sitemap
           continue-on-error: true

         - name: Set up Docker Buildx
           uses: docker/setup-buildx-action@v3

         - name: Login to Docker Hub
           uses: docker/login-action@v3
           with:
              username: ${{ env.DOCKER_USERNAME }}
              password: ${{ secrets.DOCKER_PASSWORD }}

         - name: Build and push Backend Docker image
           uses: docker/build-push-action@v5
           with:
              context: ./vocab_vault_be
              file: ./vocab_vault_be/Dockerfile
              push: true
              tags: ${{ env.BACKEND_IMAGE }}:latest
              cache-from: type=gha
              cache-to: type=gha,mode=max

         - name: Build and push Frontend Docker image
           uses: docker/build-push-action@v5
           with:
              context: .
              file: ./vocab_vault_fe/Dockerfile
              push: true
              tags: ${{ env.FRONTEND_IMAGE }}:latest
              cache-from: type=gha
              cache-to: type=gha,mode=max

   deploy:
      needs: build-and-push
      runs-on: ubuntu-latest
      if: github.ref == 'refs/heads/production'

      steps:
         - name: Deploy to Ubuntu Server
           uses: appleboy/ssh-action@v1.0.0
           with:
              host: ${{ secrets.SERVER_HOST }}
              username: ${{ secrets.SERVER_USER }}
              password: ${{ secrets.SERVER_PASSWORD }}
              port: ${{ secrets.SERVER_PORT || 22 }}
              script: |
                 cd ${{ secrets.DEPLOY_PATH || '/opt/vocab-vault' }}

                 # Pull latest images
                 docker compose pull

                 # Stop and remove containers
                 docker compose down

                 # Start services with latest images
                 docker compose up -d

                 # Clean up unused images
                 docker image prune -f

                 # Check if services are running
                 sleep 10
                 docker compose ps

                 echo "‚úÖ Deployment completed successfully!"

   notify:
      needs: [test, build-and-push, deploy]
      runs-on: ubuntu-latest
      if: always()

      steps:
         - name: Notify deployment status
           run: |
              if [ "${{ needs.deploy.result }}" = "success" ]; then
                echo "üöÄ Deployment to production successful!"
              elif [ "${{ needs.deploy.result }}" = "failure" ]; then
                echo "‚ùå Deployment failed!"
                exit 1
              else
                echo "‚ÑπÔ∏è Deployment skipped (not production branch)"
              fi
